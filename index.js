require('dotenv').config()
const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js')
const fs = require('fs')

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ]
})

client.once('ready', async () => {
  console.log(`ðŸ¤– Bot estÃ¡ online como ${client.user.tag}`)

  // Envia termos no canal especÃ­fico (se ainda nÃ£o enviado)
  const termosChannel = await client.channels.fetch(process.env.TERMOS_CHANNEL_ID)
  const mensagens = await termosChannel.messages.fetch({ limit: 10 })
  if (!mensagens.some(msg => msg.author.id === client.user.id)) {

    // Leia o arquivo de termos e divida em seÃ§Ãµes (exemplo simples)
    const termosRaw = fs.readFileSync('./termos.txt', 'utf8')

    // Exemplo de divisÃ£o simples por linha com tÃ­tulo e texto separados
    // VocÃª pode ajustar essa divisÃ£o conforme seu arquivo de texto
    // Aqui vou criar manualmente seÃ§Ãµes exemplo, pois seu texto Ã© grande
    const sections = [
      { title: 'Termos de Compra â€” ScriptForge Store', content: 'Ãšltima atualizaÃ§Ã£o: 30/07/2025' },
      { title: '1. Produtos Digitais', content: 'Todos os produtos comercializados pela ScriptForge Store sÃ£o digitais e voltados para servidores de FiveM (scripts, sistemas, utilitÃ¡rios, etc). Nenhum produto fÃ­sico Ã© enviado.' },
      { title: '2. Pagamento', content: 'Aceitamos pagamentos via Pix, cartÃ£o de crÃ©dito/dÃ©bito, boleto bancÃ¡rio e outras plataformas disponÃ­veis na loja. O envio do produto sÃ³ serÃ¡ realizado apÃ³s a confirmaÃ§Ã£o do pagamento.' },
      { title: '3. Entrega dos Produtos', content: 'A entrega Ã© feita de forma digital, geralmente por e-mail, link de download ou diretamente via contato (ex: Discord). O prazo padrÃ£o de entrega Ã© de atÃ© 24 horas Ãºteis apÃ³s a confirmaÃ§Ã£o do pagamento. Em caso de produtos com instalaÃ§Ã£o incluÃ­da, o prazo pode variar conforme o agendamento com o cliente.' },
      { title: '4. Trocas e Reembolsos', content: 'Por se tratar de produtos digitais, nÃ£o realizamos reembolsos apÃ³s o envio do arquivo. Trocas sÃ³ serÃ£o feitas em casos de erro no envio, arquivo corrompido ou incompatibilidade previamente acordada. O cliente Ã© responsÃ¡vel por verificar os requisitos e compatibilidade do script com seu servidor antes da compra.' },
      { title: '5. Suporte TÃ©cnico', content: 'Acompanha suporte bÃ¡sico para instalaÃ§Ã£o e ativaÃ§Ã£o do produto adquirido. Suporte personalizado, modificaÃ§Ãµes ou adaptaÃ§Ãµes podem ser cobradas Ã  parte. O suporte Ã© oferecido em horÃ¡rio comercial, salvo acordos previamente definidos.' },
      { title: '6. ProibiÃ§Ã£o de RedistribuiÃ§Ã£o', content: 'Ã‰ terminantemente proibida a revenda, redistribuiÃ§Ã£o ou vazamento dos produtos adquiridos. Qualquer tentativa de compartilhamento nÃ£o autorizado acarretarÃ¡ em banimento da loja, denÃºncia e medidas legais.' },
      { title: '7. Direitos Autorais', content: 'Todos os produtos sÃ£o protegidos por direitos autorais. A aquisiÃ§Ã£o de um produto concede licenÃ§a de uso, mas nÃ£o transfere a propriedade intelectual do mesmo.' },
      { title: '8. Contato', content: 'Para dÃºvidas, suporte ou outros assuntos, entre em contato atravÃ©s do ticket.' },
      { title: 'DeclaraÃ§Ã£o', content: 'âœ… Ao finalizar sua compra, vocÃª declara que leu, entendeu e concorda com todos os termos acima. ScriptForge Store â€” Qualidade, confianÃ§a e inovaÃ§Ã£o para seu servidor FiveM!' }
    ]

    const embed = new EmbedBuilder()
      .setColor('#0099ff')
      .setTitle('Termos de Compra â€” ScriptForge Store')
      .setFooter({ text: 'Ãšltima atualizaÃ§Ã£o: 30/07/2025' })

    // Adiciona cada seÃ§Ã£o como campo, cortando texto se necessÃ¡rio para 1024 caracteres
    for (const section of sections) {
      embed.addFields({
        name: section.title,
        value: section.content.length > 1024 ? section.content.slice(0, 1021) + '...' : section.content
      })
    }

    await termosChannel.send({ embeds: [embed] })

    // Opcional: enviar banner
    await termosChannel.send({ files: ['./banner.png'] })
  }
})

client.on('guildMemberAdd', async (member) => {
  const channel = await client.channels.fetch(process.env.WELCOME_CHANNEL_ID)

  await channel.send(`ðŸ‘‹ OlÃ¡ ${member}, seja bem-vindo(a) Ã  **ScriptForge Store**! Confira os termos em <#${process.env.TERMOS_CHANNEL_ID}>.`)

  const role = member.guild.roles.cache.get(process.env.ROLE_ID)
  if (role) {
    await member.roles.add(role)
  }
})

client.login(process.env.DISCORD_TOKEN)

